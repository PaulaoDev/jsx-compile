function _asyncToGenerator(a){return function(){var b=a.apply(this,arguments);return new Promise(function(c,d){function e(f,g){try{var h=b[f](g),i=h.value}catch(j){return void d(j)}return h.done?void c(i):Promise.resolve(i).then(function(j){e("next",j)},function(j){e("throw",j)})}return e("next")})}}var parse_jsx=a=>{let c=(g=>g.replace(/(\n|\s\s)/g,""))(a),d=c.match(/(?!\((.*)\)\{)\((.*?)\)\;/g),e=g=>/\<(.*)\>(.*)\<\/(.*)\>/.test(g);if(Array.isArray(d)){Array.from(d).map(g=>{if(e(g)){var h="`"+g.trim().slice(1,-2)+"`;";/{{(.*)}}/gim.test(h)&&Array.from(h.match(/{{(.*?)}}/g)).map(i=>{var j="${"+i.replace(/(\{\{|\}\})/gim,"").trim()+"}";h=h.replace(i,j)}),h=h.replace(/(\s\s|\n)/gim,""),c=c.replace(g,h)}});var f=`
                var exports = {},
                    module = {exports: {}};
                ${c}
                return Object.assign({}, module.exports, exports);
          `;return new Function(f)}};const jsx_loader=(()=>{var a=_asyncToGenerator(function*(b){jsx_loader.folder_jsx=jsx_loader.folder_jsx||"jsx/";var d="./"+jsx_loader.folder_jsx+b+".jsx",e=yield fetch(d);return e=yield e.text(),parse_jsx(e)()});return function(){return a.apply(this,arguments)}})();